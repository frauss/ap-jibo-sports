{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "asset-pack": "core",
        "children": [
            "c890741f-25f7-487e-b08a-20760a7f8b91"
        ],
        "decorators": [],
        "options": {}
    },
    "meta": {
        "version": 1
    },
    "782d03d8-f73e-4e6e-bd9b-b78a61daaaf1": {
        "id": "782d03d8-f73e-4e6e-bd9b-b78a61daaaf1",
        "class": "Subtree",
        "name": "",
        "options": {
            "behaviorPath": "idle.bt",
            "getNotepad": [
                "() => {",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "923f7592-1bf3-4baa-b39f-090785888909",
        "decorators": [
            "eb079e6c-ff5d-4a7e-82c0-36c4e11fc9a1"
        ]
    },
    "eb079e6c-ff5d-4a7e-82c0-36c4e11fc9a1": {
        "id": "eb079e6c-ff5d-4a7e-82c0-36c4e11fc9a1",
        "class": "SucceedOnListen",
        "name": "",
        "options": {
            "getOptions": [
                "() => {",
                "    let options = {",
                "        heyJibo: false,",
                "        detectEnd: false,",
                "        incremental: false,",
                "        authenticateSpeaker: ''",
                "    }",
                "    return options;",
                "}"
            ],
            "rule": "sportsResults.rule",
            "onResult": [
                "(listener) => {",
                "    listener.on('cloud', function(asrResult, speakerIds) {",
                "      if (asrResult && asrResult.NLParse) {",
                "        notepad.what = asrResult.NLParse;",
                "        console.log(\"Speech succeed with result: \" + JSON.stringify(notepad.what));",
                "      }",
                "    });",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "c890741f-25f7-487e-b08a-20760a7f8b91": {
        "id": "c890741f-25f7-487e-b08a-20760a7f8b91",
        "class": "Sequence",
        "name": "",
        "options": {},
        "asset-pack": "core",
        "parent": 1,
        "decorators": [
            "79a09d92-acf3-4646-83c2-ccd99a6e9078"
        ],
        "children": [
            "923f7592-1bf3-4baa-b39f-090785888909",
            "6f07dbac-ac9b-408e-a640-b75115bb9825",
            "d2360b83-eb5e-474a-826b-4935565c768a"
        ]
    },
    "79a09d92-acf3-4646-83c2-ccd99a6e9078": {
        "id": "79a09d92-acf3-4646-83c2-ccd99a6e9078",
        "class": "WhileCondition",
        "name": "",
        "options": {
            "init": [
                "() => {",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return true;",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "923f7592-1bf3-4baa-b39f-090785888909": {
        "id": "923f7592-1bf3-4baa-b39f-090785888909",
        "class": "Parallel",
        "name": "",
        "options": {
            "succeedOnOne": true
        },
        "asset-pack": "core",
        "parent": "c890741f-25f7-487e-b08a-20760a7f8b91",
        "children": [
            "b8b13687-8dd3-40f2-b7fc-2b8b79d10662",
            "782d03d8-f73e-4e6e-bd9b-b78a61daaaf1"
        ]
    },
    "b8b13687-8dd3-40f2-b7fc-2b8b79d10662": {
        "id": "b8b13687-8dd3-40f2-b7fc-2b8b79d10662",
        "class": "Subtree",
        "name": "idle",
        "options": {
            "behaviorPath": "idle.bt",
            "getNotepad": [
                "() => {",
                "    return {};",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "923f7592-1bf3-4baa-b39f-090785888909"
    },
    "b43fd5c0-b0da-41d2-9201-462957f354da": {
        "id": "b43fd5c0-b0da-41d2-9201-462957f354da",
        "class": "ExecuteScriptAsync",
        "name": "",
        "options": {
            "exec": [
                "(succeed, fail) => {",
                "  var sportsAPI = require('../src/sportsAPI.js');",
                "",
                "  var ruleInfo = notepad.what;",
                "  if (ruleInfo.status === 'GOT-PARSE') {",
                "    var methodInfo = {",
                "      rule: ruleInfo.rule",
                "    };",
                "    switch (ruleInfo.rule) {",
                "    case \"howdid\":",
                "      methodInfo.method = sportsAPI.getGameResponse;    ",
                "      methodInfo.team = ruleInfo[\"howdid.team.name\"];",
                "      methodInfo.date = ruleInfo[\"howdid.date.date\"];",
                "      break;",
                "",
                "    case \"whoplay\":",
                "      methodInfo.method = sportsAPI.getGameResponse;",
                "      methodInfo.team = ruleInfo[\"whoplay.team.name\"];",
                "      methodInfo.date = ruleInfo[\"whoplay.date.date\"];",
                "      break;",
                "",
                "    case \"didtheywin\":",
                "      methodInfo.method = sportsAPI.getGameResponse;",
                "      methodInfo.team = ruleInfo[\"didtheywin.team.name\"];",
                "      methodInfo.date = ruleInfo[\"didtheywin.date.date\"];",
                "      methodInfo.resultType = ruleInfo[\"didtheywin.resultType.resultType\"];",
                "      break;",
                "",
                "    case \"whatplace\":",
                "      methodInfo.method = sportsAPI.getStandingsResponse;",
                "      methodInfo.team = ruleInfo[\"whatplace.team.name\"];",
                "      break;    ",
                "    }  ",
                "    ",
                "    methodInfo.method(methodInfo, function(response) {",
                "      notepad.what.response = response;",
                "      succeed(response);",
                "    }, ",
                "    function(err, response) {",
                "      ",
                "      // Special cases for no team or game found",
                "      notepad.what.response = {",
                "        responseText: \"I'm sorry but there was a problem looking up what you asked for.\"",
                "      };",
                "      fail(err);",
                "    });",
                "  }",
                "  else {",
                "    // Special cases for no team or game found",
                "    notepad.what.response = {",
                "      responseText: \"I'm sorry but I didn't understand what you asked for.\"",
                "    };",
                "    fail(null);",
                "  }",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "6f07dbac-ac9b-408e-a640-b75115bb9825"
    },
    "d2360b83-eb5e-474a-826b-4935565c768a": {
        "id": "d2360b83-eb5e-474a-826b-4935565c768a",
        "class": "TextToSpeechJs",
        "name": "",
        "options": {
            "getWords": [
                "(callback) => {",
                "  var responseText;",
                "  if (notepad.what.response) {",
                "    responseText = notepad.what.response.responseText;",
                "  }",
                "  callback(responseText);",
                "}"
            ],
            "onWord": [
                "(word) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "c890741f-25f7-487e-b08a-20760a7f8b91"
    },
    "6f07dbac-ac9b-408e-a640-b75115bb9825": {
        "id": "6f07dbac-ac9b-408e-a640-b75115bb9825",
        "class": "Switch",
        "name": "",
        "options": {},
        "asset-pack": "core",
        "parent": "c890741f-25f7-487e-b08a-20760a7f8b91",
        "children": [
            "b43fd5c0-b0da-41d2-9201-462957f354da"
        ]
    }
}